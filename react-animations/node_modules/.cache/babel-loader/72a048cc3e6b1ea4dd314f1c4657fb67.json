{"ast":null,"code":"import _slicedToArray from \"/Users/andrewd/Personal/react-spring-tut/react-animations/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/andrewd/Personal/react-spring-tut/react-animations/src/DragList.jsx\";\n// Original: https://github.com/chenglou/react-motion/tree/master/demos/demo8-draggable-list\nimport React, { useRef } from 'react';\nimport clamp from 'lodash-es/clamp';\nimport swap from 'lodash-move';\nimport { useGesture } from 'react-use-gesture';\nimport { useSprings, animated, interpolate } from 'react-spring';\nimport './DragList.css'; // Returns fitting styles for dragged/idle items\n\nconst fn = (order, down, originalIndex, curIndex, y) => index => down && index === originalIndex ? {\n  y: curIndex * 100 + y,\n  scale: 1.1,\n  zIndex: '1',\n  shadow: 15,\n  immediate: n => n === 'y' || n === 'zIndex'\n} : {\n  y: order.indexOf(index) * 100,\n  scale: 1,\n  zIndex: '0',\n  shadow: 1,\n  immediate: false\n};\n\nexport default function DraggableList({\n  items\n}) {\n  const order = useRef(items.map((_, index) => index)); // Store indicies as a local ref, this represents the item order\n\n  const _useSprings = useSprings(items.length, fn(order.current)),\n        _useSprings2 = _slicedToArray(_useSprings, 2),\n        springs = _useSprings2[0],\n        setSprings = _useSprings2[1]; // Create springs, each corresponds to an item, controlling its transform, scale, etc.\n\n\n  const bind = useGesture(({\n    args: [originalIndex],\n    down,\n    delta: [, y]\n  }) => {\n    const curIndex = order.current.indexOf(originalIndex);\n    const curRow = clamp(Math.round((curIndex * 100 + y) / 100), 0, items.length - 1);\n    const newOrder = swap(order.current, curIndex, curRow);\n    setSprings(fn(newOrder, down, originalIndex, curIndex, y)); // Feed springs new style data, they'll animate the view without causing a single render\n\n    if (!down) order.current = newOrder;\n  });\n  return React.createElement(\"div\", {\n    className: \"content\",\n    style: {\n      height: items.length * 100\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, springs.map(({\n    zIndex,\n    shadow,\n    y,\n    scale\n  }, i) => React.createElement(animated.div, Object.assign({}, bind(i), {\n    key: i,\n    style: {\n      zIndex,\n      boxShadow: shadow.interpolate(s => \"rgba(0, 0, 0, 0.15) 0px \".concat(s, \"px \").concat(2 * s, \"px 0px\")),\n      transform: interpolate([y, scale], (y, s) => \"translate3d(0,\".concat(y, \"px,0) scale(\").concat(s, \")\"))\n    },\n    children: items[i],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }))));\n}","map":{"version":3,"sources":["/Users/andrewd/Personal/react-spring-tut/react-animations/src/DragList.jsx"],"names":["React","useRef","clamp","swap","useGesture","useSprings","animated","interpolate","fn","order","down","originalIndex","curIndex","y","index","scale","zIndex","shadow","immediate","n","indexOf","DraggableList","items","map","_","length","current","springs","setSprings","bind","args","delta","curRow","Math","round","newOrder","height","i","boxShadow","s","transform"],"mappings":"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","sourcesContent":["// Original: https://github.com/chenglou/react-motion/tree/master/demos/demo8-draggable-list\n\nimport React, { useRef } from 'react'\nimport clamp from 'lodash-es/clamp'\nimport swap from 'lodash-move'\nimport { useGesture } from 'react-use-gesture'\nimport { useSprings, animated, interpolate } from 'react-spring'\nimport './DragList.css'\n\n// Returns fitting styles for dragged/idle items\nconst fn = (order, down, originalIndex, curIndex, y) => index =>\n  down && index === originalIndex\n    ? { y: curIndex * 100 + y, scale: 1.1, zIndex: '1', shadow: 15, immediate: n => n === 'y' || n === 'zIndex' }\n    : { y: order.indexOf(index) * 100, scale: 1, zIndex: '0', shadow: 1, immediate: false }\n\nexport default function DraggableList({ items }) {\n  const order = useRef(items.map((_, index) => index)) // Store indicies as a local ref, this represents the item order\n  const [springs, setSprings] = useSprings(items.length, fn(order.current)) // Create springs, each corresponds to an item, controlling its transform, scale, etc.\n  const bind = useGesture(({ args: [originalIndex], down, delta: [, y] }) => {\n    const curIndex = order.current.indexOf(originalIndex)\n    const curRow = clamp(Math.round((curIndex * 100 + y) / 100), 0, items.length - 1)\n    const newOrder = swap(order.current, curIndex, curRow)\n    setSprings(fn(newOrder, down, originalIndex, curIndex, y)) // Feed springs new style data, they'll animate the view without causing a single render\n    if (!down) order.current = newOrder\n  })\n  return (\n    <div className=\"content\" style={{ height: items.length * 100 }}>\n      {springs.map(({ zIndex, shadow, y, scale }, i) => (\n        <animated.div\n          {...bind(i)}\n          key={i}\n          style={{\n            zIndex,\n            boxShadow: shadow.interpolate(s => `rgba(0, 0, 0, 0.15) 0px ${s}px ${2 * s}px 0px`),\n            transform: interpolate([y, scale], (y, s) => `translate3d(0,${y}px,0) scale(${s})`)\n          }}\n          children={items[i]}\n        />\n      ))}\n    </div>\n  )\n}"]},"metadata":{},"sourceType":"module"}