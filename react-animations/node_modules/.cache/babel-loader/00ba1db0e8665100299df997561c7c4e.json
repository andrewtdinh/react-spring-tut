{"ast":null,"code":"import _objectSpread from \"/Users/andrewd/Personal/react-spring-tut/react-animations/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/andrewd/Personal/react-spring-tut/react-animations/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/andrewd/Personal/react-spring-tut/react-animations/src/CardStack.jsx\";\n// Copied from https://codesandbox.io/embed/j0y0vpz59\nimport React, { useState } from \"react\";\nimport { useSprings, animated, interpolate } from \"react-spring\";\nimport { useGesture } from \"react-use-gesture\";\nimport \"./CardStack.css\";\nconst cards = [\"https://upload.wikimedia.org/wikipedia/en/f/f5/RWS_Tarot_08_Strength.jpg\", \"https://upload.wikimedia.org/wikipedia/en/5/53/RWS_Tarot_16_Tower.jpg\", \"https://upload.wikimedia.org/wikipedia/en/9/9b/RWS_Tarot_07_Chariot.jpg\", \"https://upload.wikimedia.org/wikipedia/en/d/db/RWS_Tarot_06_Lovers.jpg\", \"https://upload.wikimedia.org/wikipedia/en/thumb/8/88/RWS_Tarot_02_High_Priestess.jpg/690px-RWS_Tarot_02_High_Priestess.jpg\", \"https://upload.wikimedia.org/wikipedia/en/d/de/RWS_Tarot_01_Magician.jpg\"]; // These two are just helpers, they curate spring data, values that are later being interpolated into css\n\nconst to = i => ({\n  x: 0,\n  y: i * -4,\n  scale: 1,\n  rot: -10 + Math.random() * 20,\n  delay: i * 100\n});\n\nconst from = i => ({\n  x: 0,\n  rot: 0,\n  scale: 1.5,\n  y: -1000\n}); // This is being used down there in the view, it interpolates rotation and scale into a css transform\n\n\nconst trans = (r, s) => \"perspective(1500px) rotateX(30deg) rotateY(\".concat(r / 10, \"deg) rotateZ(\").concat(r, \"deg) scale(\").concat(s, \")\");\n\nexport default function Deck() {\n  const _useState = useState(() => new Set()),\n        _useState2 = _slicedToArray(_useState, 1),\n        gone = _useState2[0]; // The set flags all the cards that are flicked out\n\n\n  const _useSprings = useSprings(cards.length, i => _objectSpread({}, to(i), {\n    from: from(i)\n  })),\n        _useSprings2 = _slicedToArray(_useSprings, 2),\n        props = _useSprings2[0],\n        set = _useSprings2[1]; // Create a bunch of springs using the helpers above\n  // Create a gesture, we're interested in down-state, delta (current-pos - click-pos), direction and velocity\n\n\n  const bind = useGesture(({\n    args: [index],\n    down,\n    delta: [xDelta],\n    distance,\n    direction: [xDir],\n    velocity\n  }) => {\n    const trigger = velocity > 0.2; // If you flick hard enough it should trigger the card to fly out\n\n    const dir = xDir < 0 ? -1 : 1; // Direction should either point left or right\n\n    if (!down && trigger) gone.add(index); // If button/finger's up and trigger velocity is reached, we flag the card ready to fly out\n\n    set(i => {\n      if (index !== i) return; // We're only interested in changing spring-data for the current spring\n\n      const isGone = gone.has(index);\n      const x = isGone ? (200 + window.innerWidth) * dir : down ? xDelta : 0; // When a card is gone it flys out left or right, otherwise goes back to zero\n\n      const rot = xDelta / 100 + (isGone ? dir * 10 * velocity : 0); // How much the card tilts, flicking it harder makes it rotate faster\n\n      const scale = down ? 1.1 : 1; // Active cards lift up a bit\n\n      return {\n        x,\n        rot,\n        scale,\n        delay: undefined,\n        config: {\n          friction: 50,\n          tension: down ? 800 : isGone ? 200 : 500\n        }\n      };\n    });\n    if (!down && gone.size === cards.length) setTimeout(() => gone.clear() || set(i => to(i)), 600);\n  }); // Now we're just mapping the animated values to our view, that's it. Btw, this component only renders once. :-)\n\n  return props.map(({\n    x,\n    y,\n    rot,\n    scale\n  }, i) => React.createElement(animated.div, {\n    key: i,\n    style: {\n      transform: interpolate([x, y], (x, y) => \"translate3d(\".concat(x, \"px,\").concat(y, \"px,0)\"))\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(animated.div, Object.assign({}, bind(i), {\n    style: {\n      transform: interpolate([rot, scale], trans),\n      backgroundImage: \"url(\".concat(cards[i], \")\")\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }))));\n}","map":{"version":3,"sources":["/Users/andrewd/Personal/react-spring-tut/react-animations/src/CardStack.jsx"],"names":["React","useState","useSprings","animated","interpolate","useGesture","cards","to","i","x","y","scale","rot","Math","random","delay","from","trans","r","s","Deck","Set","gone","length","props","set","bind","args","index","down","delta","xDelta","distance","direction","xDir","velocity","trigger","dir","add","isGone","has","window","innerWidth","undefined","config","friction","tension","size","setTimeout","clear","map","transform","backgroundImage"],"mappings":"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","sourcesContent":["// Copied from https://codesandbox.io/embed/j0y0vpz59\nimport React, { useState } from \"react\";\nimport { useSprings, animated, interpolate } from \"react-spring\";\nimport { useGesture } from \"react-use-gesture\";\nimport \"./CardStack.css\";\n\nconst cards = [\n  \"https://upload.wikimedia.org/wikipedia/en/f/f5/RWS_Tarot_08_Strength.jpg\",\n  \"https://upload.wikimedia.org/wikipedia/en/5/53/RWS_Tarot_16_Tower.jpg\",\n  \"https://upload.wikimedia.org/wikipedia/en/9/9b/RWS_Tarot_07_Chariot.jpg\",\n  \"https://upload.wikimedia.org/wikipedia/en/d/db/RWS_Tarot_06_Lovers.jpg\",\n  \"https://upload.wikimedia.org/wikipedia/en/thumb/8/88/RWS_Tarot_02_High_Priestess.jpg/690px-RWS_Tarot_02_High_Priestess.jpg\",\n  \"https://upload.wikimedia.org/wikipedia/en/d/de/RWS_Tarot_01_Magician.jpg\"\n];\n\n// These two are just helpers, they curate spring data, values that are later being interpolated into css\nconst to = i => ({\n  x: 0,\n  y: i * -4,\n  scale: 1,\n  rot: -10 + Math.random() * 20,\n  delay: i * 100\n});\nconst from = i => ({ x: 0, rot: 0, scale: 1.5, y: -1000 });\n// This is being used down there in the view, it interpolates rotation and scale into a css transform\nconst trans = (r, s) =>\n  `perspective(1500px) rotateX(30deg) rotateY(${r /\n    10}deg) rotateZ(${r}deg) scale(${s})`;\n\nexport default function Deck() {\n  const [gone] = useState(() => new Set()); // The set flags all the cards that are flicked out\n  const [props, set] = useSprings(cards.length, i => ({\n    ...to(i),\n    from: from(i)\n  })); // Create a bunch of springs using the helpers above\n  // Create a gesture, we're interested in down-state, delta (current-pos - click-pos), direction and velocity\n  const bind = useGesture(\n    ({\n      args: [index],\n      down,\n      delta: [xDelta],\n      distance,\n      direction: [xDir],\n      velocity\n    }) => {\n      const trigger = velocity > 0.2; // If you flick hard enough it should trigger the card to fly out\n      const dir = xDir < 0 ? -1 : 1; // Direction should either point left or right\n      if (!down && trigger) gone.add(index); // If button/finger's up and trigger velocity is reached, we flag the card ready to fly out\n      set(i => {\n        if (index !== i) return; // We're only interested in changing spring-data for the current spring\n        const isGone = gone.has(index);\n        const x = isGone ? (200 + window.innerWidth) * dir : down ? xDelta : 0; // When a card is gone it flys out left or right, otherwise goes back to zero\n        const rot = xDelta / 100 + (isGone ? dir * 10 * velocity : 0); // How much the card tilts, flicking it harder makes it rotate faster\n        const scale = down ? 1.1 : 1; // Active cards lift up a bit\n        return {\n          x,\n          rot,\n          scale,\n          delay: undefined,\n          config: { friction: 50, tension: down ? 800 : isGone ? 200 : 500 }\n        };\n      });\n      if (!down && gone.size === cards.length)\n        setTimeout(() => gone.clear() || set(i => to(i)), 600);\n    }\n  );\n  // Now we're just mapping the animated values to our view, that's it. Btw, this component only renders once. :-)\n  return props.map(({ x, y, rot, scale }, i) => (\n    <animated.div\n      key={i}\n      style={{\n        transform: interpolate([x, y], (x, y) => `translate3d(${x}px,${y}px,0)`)\n      }}\n    >\n      {/* This is the card itself, we're binding our gesture to it (and inject its index so we know which is which) */}\n      <animated.div\n        {...bind(i)}\n        style={{\n          transform: interpolate([rot, scale], trans),\n          backgroundImage: `url(${cards[i]})`\n        }}\n      />\n    </animated.div>\n  ));\n}\n"]},"metadata":{},"sourceType":"module"}